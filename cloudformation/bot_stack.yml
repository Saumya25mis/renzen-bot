AWSTemplateFormatVersion: "2010-09-09"
Metadata:
  Generator: "me-test"
Description: "Creates Pipeline for Bot Instance"

Parameters:

  CodeEnvironment:
    Type: String
    Description: Environment prefix

  BuildSpecLocation:
    Type: String
    Description: Buildspec location
    # arn:aws:s3:::my-codebuild-sample2/buildspec.yml
    # use buildspec from production branch to keep from modfications?
    # in dev branches
    Default: "buildspecs/deploy_buildspec.yml"

  GitHubBranchName:
    Type: String
    Description: Github branch name

  GitHubRepoName:
    Type: String
    Description: Github repo name
    Default: eklie

  DiscordToken:
    Type: String
    Description: Discord token

  HostedZoneId:
    Type: String
    Description: hosted zone

Resources:

  SecretsManagerSecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: !Sub "${CodeEnvironment}-DiscordToken"
      SecretString: !Ref DiscordToken

  AccountBaseS3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "${CodeEnvironment}-cloudformation-files-renzen"

  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub "${CodeEnvironment}-BotCodePipeline"
      RoleArn: !GetAtt BotPipelineRole.Arn
      ArtifactStore:
        Location: !Ref AccountBaseS3Bucket
        Type: "S3"
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeStarSourceConnection
              Configuration:
                BranchName: !Ref GitHubBranchName
                ConnectionArn: !ImportValue BotGithubConnection
                FullRepositoryId: !Ref GitHubRepoName
                OutputArtifactFormat: "CODE_ZIP"
              OutputArtifacts:
                - Name: SourceArtifact
              Region: !Ref AWS::Region
              Namespace: "SourceVariables"
              RunOrder: 1
        - Name: "Build"
          Actions:
            - Name: "Build"
              ActionTypeId:
                Category: "Build"
                Owner: "AWS"
                Provider: "CodeBuild"
                Version: "1"
              Configuration:
                ProjectName: !Ref CodeBuildProject
                EnvironmentVariables: !Sub "[{\"name\":\"CURRENT_ENVIRONMENT\", \"type\": \"PLAINTEXT\", \"value\": \"${CodeEnvironment}\"}]"
              InputArtifacts:
                - Name: "SourceArtifact"
              OutputArtifacts:
                - Name: "secondary_artifact_name_1"
                - Name: "secondary_artifact_name_2"
              Region: !Ref AWS::Region
              Namespace: "BuildVariables"
              RunOrder: 1
        - Name: "DeployBot"
          Actions:
            - Name: "DeployMyBot"
              ActionTypeId:
                Category: "Deploy"
                Owner: "AWS"
                Provider: "ECS"
                Version: "1"
              Configuration:
                ClusterName: !Sub "${CodeEnvironment}-bot-cluster"
                ServiceName: !Sub "${CodeEnvironment}-bot-service"
              InputArtifacts:
                - Name: "secondary_artifact_name_1"
              Region: !Ref AWS::Region
              Namespace: "DeployVariables"
              RunOrder: 1
            - Name: "DeployMySite"
              ActionTypeId:
                Category: "Deploy"
                Owner: "AWS"
                Provider: "ECS"
                Version: "1"
              Configuration:
                ClusterName: !Sub "${CodeEnvironment}-bot-cluster"
                ServiceName: !Sub "${CodeEnvironment}-site-service"
              InputArtifacts:
                - Name: "secondary_artifact_name_2"
              Region: !Ref AWS::Region
              Namespace: "DeployVariablesSite"
              RunOrder: 1

  CodeBuildProject:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Name: !Sub "${CodeEnvironment}-BotCodeBuildProject"
      Source:
        InsecureSsl: false
        Type: "CODEPIPELINE"
        BuildSpec: !Ref BuildSpecLocation
      Artifacts:
        EncryptionDisabled: false
        Name: !Sub '${CodeEnvironment}-BotCodeBuildProject'
        Packaging: "NONE"
        Type: "CODEPIPELINE"
      Cache:
        Type: "NO_CACHE"
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/standard:4.0"
        ImagePullCredentialsType: "CODEBUILD"
        PrivilegedMode: true
        Type: "LINUX_CONTAINER"
      ServiceRole: !GetAtt BotCodeBuildRole.Arn
      TimeoutInMinutes: 60
      QueuedTimeoutInMinutes: 480
      LogsConfig:
        CloudWatchLogs:
          Status: "ENABLED"
        S3Logs:
          Status: "DISABLED"
          EncryptionDisabled: false
      Visibility: "PRIVATE"

  BotPipelineRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/service-role/"
      RoleName: !Sub "${CodeEnvironment}-BotPipelineRole"
      AssumeRolePolicyDocument: '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"codepipeline.amazonaws.com"},"Action":"sts:AssumeRole"}]}'
      MaxSessionDuration: 3600
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  BotCodeBuildRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/service-role/"
      RoleName: !Sub "${CodeEnvironment}-BotCodeBuildRole"
      AssumeRolePolicyDocument: '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"codebuild.amazonaws.com"},"Action":"sts:AssumeRole"}]}'
      MaxSessionDuration: 3600
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  ECRRepository:
    Type: "AWS::ECR::Repository"
    Properties:
      RepositoryName: !Sub "${CodeEnvironment}-bot-repo"

# ------


  myLoadBalancerSite:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${CodeEnvironment}-myLoadBalancerSite'
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref mySubnet1
        - !Ref mySubnet2

  myListenerSite:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref myLoadBalancerSite
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref myTargetGroupSite

  myTargetGroupSite:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckPort: 80
      HealthCheckTimeoutSeconds: 10
      HealthCheckIntervalSeconds: 15
      HealthyThresholdCount: 2
      Name: !Sub '${CodeEnvironment}-myTargetGroupSite'
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !Ref myVPC

  ECSCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: !Sub "${CodeEnvironment}-bot-cluster"
      CapacityProviders:
        - "FARGATE"
        - "FARGATE_SPOT"

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub "${CodeEnvironment}-bot-service"
      Cluster:
        Ref: "ECSCluster"
      DesiredCount: 1
      TaskDefinition:
        Ref: "ECSTaskDefinition"
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: "ENABLED"
          SecurityGroups:
            - !Ref InstanceSecurityGroup
          Subnets:
            - !Ref mySubnet1
            - !Ref mySubnet2
      SchedulingStrategy: "REPLICA"
      CapacityProviderStrategy:
        - CapacityProvider: "FARGATE"
          Weight: 1
          Base: 0

  ECSServiceSite:
    Type: AWS::ECS::Service
    DependsOn: myListenerSite
    Properties:
      ServiceName: !Sub "${CodeEnvironment}-site-service"
      Cluster:
        Ref: "ECSCluster"
      DesiredCount: 1
      TaskDefinition:
        Ref: "ECSTaskDefinitionSite"
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: "ENABLED"
          SecurityGroups:
            - !Ref InstanceSecurityGroup
          Subnets:
            - !Ref mySubnet1
            - !Ref mySubnet2
      SchedulingStrategy: "REPLICA"
      CapacityProviderStrategy:
        - CapacityProvider: "FARGATE"
          Weight: 1
          Base: 0
      LoadBalancers:
        - TargetGroupArn:
            Ref: myTargetGroupSite
          ContainerPort: 80
          ContainerName: !Sub '${CodeEnvironment}-site-container'

  ECSTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions:
        - Essential: true
          Environment:
          - Name: CURRENT_ENVIRONMENT
            Value: !Ref CodeEnvironment
          # Environment: !Sub
          #   - '[{"name":"CURRENT_ENVIRONMENT", "value": "${CodeEnvironment}"}]'
          #   - CodeEnvironment: !Ref CodeEnvironment
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/bot-repo:${CodeEnvironment}-LatestBot"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-create-group: "true"
              awslogs-group: !Sub "${CodeEnvironment}-bot-task"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: "task"
          Name: !Sub "${CodeEnvironment}-bot-container"
          PortMappings:
            - ContainerPort: 80
      Family: !Sub "${CodeEnvironment}-bot-task"
      TaskRoleArn: !Ref botDeployTaskRole
      ExecutionRoleArn: !Ref botecsTaskExecutionRole
      NetworkMode: "awsvpc"
      RequiresCompatibilities:
        - "FARGATE"
      Cpu: "1024"
      Memory: "3072"

  ECSTaskDefinitionSite:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions:
        - Essential: true
          Environment:
          - Name: CURRENT_ENVIRONMENT
            Value: !Ref CodeEnvironment
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/bot-repo:${CodeEnvironment}-LatestSite"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-create-group: "true"
              awslogs-group: !Sub "${CodeEnvironment}-bot-site"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: "site"
          Name: !Sub "${CodeEnvironment}-site-container"
          PortMappings:
            - ContainerPort: 80
      Family: !Sub "${CodeEnvironment}-site-task"
      TaskRoleArn: !Ref botDeployTaskRole
      ExecutionRoleArn: !Ref botecsTaskExecutionRole
      NetworkMode: "awsvpc"
      RequiresCompatibilities:
        - "FARGATE"
      Cpu: "1024"
      Memory: "3072"

  myDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId # FROM CONSOLE
      Comment: DNS name for my instance.
      Name: !Sub "${CodeEnvironment}.renzen.io"
      Type: A
      AliasTarget:
        DNSName: !GetAtt myLoadBalancerSite.DNSName
        HostedZoneId: !GetAtt myLoadBalancerSite.CanonicalHostedZoneID

  myRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: stack
          Value: production

  mySubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref mySubnet1
      RouteTableId:
        Ref: myRouteTable

  mySubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref mySubnet2
      RouteTableId:
        Ref: myRouteTable

  myRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId:
        Ref: myRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref myInternetGateway

  mySubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      VpcId: !Ref myVPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: "AWS::Region"
      Tags:
        - Key: stack
          Value: production

  mySubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      VpcId: !Ref myVPC
      CidrBlock: 10.0.100.0/24
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: "AWS::Region"
      Tags:
        - Key: stack
          Value: production

  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      Tags:
        - Key: stack
          Value: !Sub '${CodeEnvironment}'

  LoadBalancerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enable HTTP access on port 80
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: "80"
          ToPort: "80"
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: "80"
          ToPort: "80"
          CidrIp: 0.0.0.0/0

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId:
        Ref: myVPC
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow fargate service attach to RDS
      VpcId:
        Ref: myVPC
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !GetAtt InstanceSecurityGroup.GroupId

  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId:
        Ref: myInternetGateway

  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: stack
          Value: !Sub '${CodeEnvironment}'

  DataSourceSubtNetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Created by CF
      SubnetIds:
        - !Ref mySubnet1
        - !Ref mySubnet2

  myBotLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${CodeEnvironment}-bot-task"
      RetentionInDays: 30

  mySiteLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "${CodeEnvironment}-bot-site"
      RetentionInDays: 30

  BotS3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "${CodeEnvironment}-renzen-bot-s3-bucket"

  MyQueue:
    Properties:
      QueueName: !Sub '${CodeEnvironment}-MyQueue.fifo'
      FifoQueue: true
      ContentBasedDeduplication: true
    Type: "AWS::SQS::Queue"

  MyRDSInstanceRotationSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${CodeEnvironment}-DBPassword"
      Description: "This is the secret for my RDS instance"
      GenerateSecretString:
        SecretStringTemplate: '{"username": "myadmin"}'
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\'

  MyDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      DBInstanceClass: db.t4g.micro
      Engine: postgres
      MasterUsername:
        !Join [
          "",
          [
            "{{resolve:secretsmanager:",
            !Ref MyRDSInstanceRotationSecret,
            ":SecretString:username}}",
          ],
        ]
      MasterUserPassword:
        !Join [
          "",
          [
            "{{resolve:secretsmanager:",
            !Ref MyRDSInstanceRotationSecret,
            ":SecretString:password}}",
          ],
        ]
      BackupRetentionPeriod: 0
      DBInstanceIdentifier: !Sub "${CodeEnvironment}-rotation-instance"
      DBSubnetGroupName: !Ref DataSourceSubtNetGroup
      PubliclyAccessible: true
      VPCSecurityGroups:
        - !GetAtt RDSSecurityGroup.GroupId

  SecretRDSInstanceAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref MyRDSInstanceRotationSecret
      TargetId: !Ref MyDBInstance
      TargetType: AWS::RDS::DBInstance

  botDeployTaskRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: !Sub "${CodeEnvironment}-botDeployTaskRole"
      AssumeRolePolicyDocument: '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"ecs-tasks.amazonaws.com"},"Action":"sts:AssumeRole"}]}'
      MaxSessionDuration: 3600
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
        - "arn:aws:iam::aws:policy/SecretsManagerReadWrite"
        - "arn:aws:iam::aws:policy/AmazonSQSFullAccess"
        - "arn:aws:iam::aws:policy/AmazonRDSFullAccess"
      Description: "Allows EC2 instances to call AWS services on your behalf. And get secrets"

  botecsTaskExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: !Sub "${CodeEnvironment}-botecsTaskExecutionRole"
      AssumeRolePolicyDocument: '{"Version":"2008-10-17","Statement":[{"Sid":"","Effect":"Allow","Principal":{"Service":"ecs-tasks.amazonaws.com"},"Action":"sts:AssumeRole"}]}'
      MaxSessionDuration: 3600
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
        - "arn:aws:iam::aws:policy/AmazonSQSFullAccess"
        - "arn:aws:iam::aws:policy/AmazonRDSFullAccess"
