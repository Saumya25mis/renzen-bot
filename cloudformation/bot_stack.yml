AWSTemplateFormatVersion: "2010-09-09"
Metadata:
  Generator: "me-test"
Description: "Stack used to start and stop bot and pipeline."

Resources:
#   ECSScalableTarget:
#     Type: AWS::ApplicationAutoScaling::ScalableTarget
#     Properties:
#       MaxCapacity: 1
#       MinCapacity: 1
#       RoleARN:
#         Fn::Sub: "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
#       ServiceNamespace: ecs
#       ScalableDimension: "ecs:service:DesiredCount"
#       ScalableDimension: "ecs:service:DesiredCount"
#       ResourceId: !Join
#         - /
#         - - service
#           - !Ref ECSCluster
#           - !GetAtt ECSService.Name

  ECSScalableTargetSite:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 3
      MinCapacity: 1
      RoleARN:
        Fn::Sub: "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
      ServiceNamespace: ecs
      ScalableDimension: "ecs:service:DesiredCount"
      ResourceId: !Join
        - /
        - - service
          - !Ref ECSCluster
          - !GetAtt ECSServiceSite.Name

  # ServiceScalingPolicyCPU:
  #   Type: AWS::ApplicationAutoScaling::ScalingPolicy
  #   Properties:
  #     PolicyName: !Sub ${AWS::StackName}-target-tracking-cpu70
  #     PolicyType: TargetTrackingScaling
  #     ScalingTargetId: !Ref ECSScalableTarget
  #     TargetTrackingScalingPolicyConfiguration:
  #       TargetValue: 70.0
  #       ScaleInCooldown: 180
  #       ScaleOutCooldown: 60
  #       PredefinedMetricSpecification:
  #         PredefinedMetricType: ECSServiceAverageCPUUtilization

  # ServiceScalingPolicyMem:
  #   Type: AWS::ApplicationAutoScaling::ScalingPolicy
  #   Properties:
  #     PolicyName: !Sub ${AWS::StackName}-target-tracking-mem90
  #     PolicyType: TargetTrackingScaling
  #     ScalingTargetId: !Ref ECSScalableTarget
  #     TargetTrackingScalingPolicyConfiguration:
  #       TargetValue: 90.0
  #       ScaleInCooldown: 180
  #       ScaleOutCooldown: 60
  #       PredefinedMetricSpecification:
  #         PredefinedMetricType: ECSServiceAverageMemoryUtilization

  # myLoadBalancer:
  #   Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  #   Properties:
  #     Name: myLoadBalancer
  #     SecurityGroups:
  #       - !ImportValue LoadBalancerSecurityGroup
  #     Subnets:
  #       - !ImportValue mySubnet1
  #       - !ImportValue mySubnet2

  myLoadBalancerSite:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: myLoadBalancerSite
      SecurityGroups:
        - !ImportValue LoadBalancerSecurityGroup
      Subnets:
        - !ImportValue mySubnet1
        - !ImportValue mySubnet2

  # myListener:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     LoadBalancerArn: !Ref myLoadBalancer
  #     Port: 80
  #     Protocol: HTTP
  #     DefaultActions:
  #       - Type: forward
  #         TargetGroupArn: !Ref myTargetGroup

  # myTargetGroup:
  #   Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #   Properties:
  #     HealthCheckEnabled: true
  #     HealthCheckPort: 80
  #     HealthCheckTimeoutSeconds: 10
  #     HealthCheckIntervalSeconds: 15
  #     HealthyThresholdCount: 2
  #     Name: myTargetGroup
  #     Port: 80
  #     Protocol: HTTP
  #     TargetType: ip
  #     VpcId: !ImportValue myVPC

  myListenerSite:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref myLoadBalancerSite
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref myTargetGroupSite

  myTargetGroupSite:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckPort: 80
      HealthCheckTimeoutSeconds: 10
      HealthCheckIntervalSeconds: 15
      HealthyThresholdCount: 2
      Name: myTargetGroupSite
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !ImportValue myVPC

  ECSCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: "bot-cluster"
      CapacityProviders:
        - "FARGATE"
        - "FARGATE_SPOT"

  ECSService:
    Type: AWS::ECS::Service
    # DependsOn: BotCodePipeline
    Properties:
      ServiceName: "bot-service"
      Cluster:
        Ref: "ECSCluster"
      DesiredCount: 1
      TaskDefinition:
        Ref: "ECSTaskDefinition"
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: "ENABLED"
          SecurityGroups:
            - !ImportValue InstanceSecurityGroup
          Subnets:
            - !ImportValue mySubnet1
            - !ImportValue mySubnet2
      SchedulingStrategy: "REPLICA"
      CapacityProviderStrategy:
        - CapacityProvider: "FARGATE"
          Weight: 1
          Base: 0
      # LoadBalancers:
      #   - TargetGroupArn:
      #       Ref: myTargetGroup
      #     ContainerPort: 80
      #     ContainerName: bot-container

  ECSServiceSite:
    Type: AWS::ECS::Service
    DependsOn: myListenerSite
    Properties:
      ServiceName: "site-service"
      Cluster:
        Ref: "ECSCluster"
      DesiredCount: 1
      TaskDefinition:
        Ref: "ECSTaskDefinitionSite"
      # LaunchType: EC2
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: "ENABLED"
          SecurityGroups:
            - !ImportValue InstanceSecurityGroup
          Subnets:
            - !ImportValue mySubnet1
            - !ImportValue mySubnet2
      SchedulingStrategy: "REPLICA"
      CapacityProviderStrategy:
        - CapacityProvider: "FARGATE"
          Weight: 1
          Base: 0
      LoadBalancers:
        - TargetGroupArn:
            Ref: myTargetGroupSite
          ContainerPort: 80
          ContainerName: site-container

  ECSTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/bot-repo:Latest"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-create-group: "true"
              awslogs-group: "bot-task"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: "task"
          Name: "bot-container"
          PortMappings:
            - ContainerPort: 80
      Family: "bot-task"
      TaskRoleArn: !ImportValue botDeployTaskRole
      ExecutionRoleArn: !ImportValue botecsTaskExecutionRole
      NetworkMode: "awsvpc"
      RequiresCompatibilities:
        - "FARGATE"
      Cpu: "1024"
      Memory: "3072"

  ECSTaskDefinitionSite:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/bot-repo:LatestSite"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-create-group: "true"
              awslogs-group: "bot-site"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: "site"
          Name: "site-container"
          PortMappings:
            - ContainerPort: 80
      Family: "site-task"
      TaskRoleArn: !ImportValue botDeployTaskRole
      ExecutionRoleArn: !ImportValue botecsTaskExecutionRole
      NetworkMode: "awsvpc"
      RequiresCompatibilities:
        - "FARGATE"
      Cpu: "1024"
      Memory: "3072"

  # BotCodePipeline:
  #   Type: AWS::CodePipeline::Pipeline
  #   Properties:
  #     Name: BotCodePipeline
  #     RoleArn: !ImportValue BotPipelineRole
  #     ArtifactStore:
  #       Location: !ImportValue BotS3Bucket
  #       Type: "S3"
  #     Stages:
  #       - Name: Source
  #         Actions:
  #           - Name: Source
  #             ActionTypeId:
  #               Category: Source
  #               Owner: AWS
  #               Version: 1
  #               Provider: CodeStarSourceConnection
  #             Configuration:
  #               BranchName: !ImportValue GitHubBranchName
  #               ConnectionArn: !ImportValue BotGithubConnection
  #               FullRepositoryId: !ImportValue GitHubRepoName
  #               OutputArtifactFormat: "CODE_ZIP"
  #             OutputArtifacts:
  #               - Name: SourceArtifact
  #             Region: !Ref AWS::Region
  #             Namespace: "SourceVariables"
  #             RunOrder: 1
  #       - Name: "Build"
  #         Actions:
  #           - Name: "Build"
  #             ActionTypeId:
  #               Category: "Build"
  #               Owner: "AWS"
  #               Provider: "CodeBuild"
  #               Version: "1"
  #             Configuration:
  #               ProjectName: !Ref CodeBuildProject
  #             InputArtifacts:
  #               - Name: "SourceArtifact"
  #             OutputArtifacts:
  #               - Name: "secondary_artifact_name_1"
  #               - Name: "secondary_artifact_name_2"
  #             Region: !Ref AWS::Region
  #             Namespace: "BuildVariables"
  #             RunOrder: 1
  #       - Name: "DeployBot"
  #         Actions:
  #           - Name: "DeployMyBot"
  #             ActionTypeId:
  #               Category: "Deploy"
  #               Owner: "AWS"
  #               Provider: "ECS"
  #               Version: "1"
  #             Configuration:
  #               ClusterName: bot-cluster #!Ref ECSCluster
  #               ServiceName: bot-service #!GetAtt ECSService.Name
  #             InputArtifacts:
  #               - Name: "secondary_artifact_name_1"
  #             Region: !Ref AWS::Region
  #             Namespace: "DeployVariables"
  #             RunOrder: 1
  #           - Name: "DeployMySite"
  #             ActionTypeId:
  #               Category: "Deploy"
  #               Owner: "AWS"
  #               Provider: "ECS"
  #               Version: "1"
  #             Configuration:
  #               ClusterName: bot-cluster #!Ref ECSCluster
  #               ServiceName: site-service #!GetAtt ECSService.Name
  #             InputArtifacts:
  #               - Name: "secondary_artifact_name_2"
  #             Region: !Ref AWS::Region
  #             Namespace: "DeployVariablesSite"
  #             RunOrder: 1

  # CodeBuildProject:
  #   Type: "AWS::CodeBuild::Project"
  #   Properties:
  #     Name: BotCodeBuildProject # !Sub "${CodeBuildProject3}-3"
  #     Source:
  #       InsecureSsl: false
  #       Type: "CODEPIPELINE"
  #     Artifacts:
  #       EncryptionDisabled: false
  #       Name: BotCodeBuildProject # !Sub "${CodeBuildProject3}-3"
  #       Packaging: "NONE"
  #       Type: "CODEPIPELINE"
  #     Cache:
  #       Type: "NO_CACHE"
  #     Environment:
  #       ComputeType: "BUILD_GENERAL1_SMALL"
  #       Image: "aws/codebuild/standard:4.0"
  #       ImagePullCredentialsType: "CODEBUILD"
  #       PrivilegedMode: true
  #       Type: "LINUX_CONTAINER"
  #     ServiceRole: !ImportValue BotCodeBuildRole
  #     TimeoutInMinutes: 60
  #     QueuedTimeoutInMinutes: 480
  #     LogsConfig:
  #       CloudWatchLogs:
  #         Status: "ENABLED"
  #       S3Logs:
  #         Status: "DISABLED"
  #         EncryptionDisabled: false
  #     Visibility: "PRIVATE"

  myDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: Z07096223ERVZ2460AEFE # FROM CONSOLE
      Comment: DNS name for my instance.
      Name: "api.renzen.io"
      Type: A
      AliasTarget:
        DNSName: !GetAtt myLoadBalancerSite.DNSName
        HostedZoneId: !GetAtt myLoadBalancerSite.CanonicalHostedZoneID

# Outputs:
  # myLoadBalancerDNSName:
  #   Value: !GetAtt myLoadBalancer.DNSName
  #   Export:
  #     Name: myLoadBalancerDNSName

  # myLoadBalancerCanonicalHostedZoneID:
  #   Value: !GetAtt myLoadBalancer.CanonicalHostedZoneID
  #   Export:
  #     Name: myLoadBalancerCanonicalHostedZoneID
