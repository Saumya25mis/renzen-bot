AWSTemplateFormatVersion: "2010-09-09"
Metadata:
    Generator: "me-test"
Description: "Stack used to start and stop bot and pipeline."

Resources:

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/quickref-autoscaling.html
  # https://stackoverflow.com/questions/48529074/how-is-target-groups-different-from-auto-scaling-groups-in-aws


  ECSScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 6
      MinCapacity: 1
      RoleARN:
        Fn::Sub: 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService'
      ServiceNamespace: ecs
      ScalableDimension: 'ecs:service:DesiredCount'
      ResourceId: !Join
        - /
        - - service
          - !Ref ECSCluster
          - !GetAtt ECSService.Name

  ECSScalableTargetSite:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 6
      MinCapacity: 1
      RoleARN:
        Fn::Sub: 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService'
      ServiceNamespace: ecs
      ScalableDimension: 'ecs:service:DesiredCount'
      ResourceId: !Join
        - /
        - - service
          - !Ref ECSCluster
          - !GetAtt ECSServiceSite.Name

  ServiceScalingPolicyCPU:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-target-tracking-cpu70
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ECSScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0
        ScaleInCooldown: 180
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization

  ServiceScalingPolicyMem:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-target-tracking-mem90
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ECSScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 90.0
        ScaleInCooldown: 180
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageMemoryUtilization

  myLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      # IpAddressType: String
      # LoadBalancerAttributes:
      #   - LoadBalancerAttribute
      Name: myLoadBalancer
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref mySubnet1
        - !Ref mySubnet2

  myLoadBalancerSite:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      # IpAddressType: String
      # LoadBalancerAttributes:
      #   - LoadBalancerAttribute
      Name: myLoadBalancerSite
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets:
        - !Ref mySubnet1
        - !Ref mySubnet2

  LoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access on port 80
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0

  myListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
          LoadBalancerArn: !Ref myLoadBalancer
          Port: 80
          Protocol: HTTP
          DefaultActions:
              - Type: forward
                TargetGroupArn: !Ref myTargetGroup

  myTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckPort: 80
      Name: myTargetGroup
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Ref: myVPC


  myListenerSite:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
          LoadBalancerArn: !Ref myLoadBalancerSite
          Port: 80
          Protocol: HTTP
          DefaultActions:
              - Type: forward
                TargetGroupArn: !Ref myTargetGroupSite

  myTargetGroupSite:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckPort: 80
      Name: myTargetGroupSite
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId:
        Ref: myVPC

# ---------------------------------------------------------------------------

  ECSCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
        ClusterName: "bot-cluster"
        CapacityProviders:
        - "FARGATE"
        - "FARGATE_SPOT"

  ECSService:
    Type: AWS::ECS::Service
    DependsOn: myListener
    Properties:
      ServiceName: "bot-service"
      Cluster:
        Ref: "ECSCluster"
      DesiredCount: 1
      TaskDefinition:
        Ref: "ECSTaskDefinition"
      # LaunchType: EC2
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: "ENABLED"
          SecurityGroups:
            - !Ref InstanceSecurityGroup
          Subnets:
            - !Ref mySubnet1
            - !Ref mySubnet2
      SchedulingStrategy: "REPLICA"
      CapacityProviderStrategy:
        - CapacityProvider: "FARGATE"
          Weight: 1
          Base: 0
      LoadBalancers:
      - TargetGroupArn:
          Ref: myTargetGroup
        ContainerPort: 80
        ContainerName: bot-container

  ECSServiceSite:
    Type: AWS::ECS::Service
    DependsOn: myListenerSite
    Properties:
      ServiceName: "site-service"
      Cluster:
        Ref: "ECSCluster"
      DesiredCount: 1
      TaskDefinition:
        Ref: "ECSTaskDefinitionSite"
      # LaunchType: EC2
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: "ENABLED"
          SecurityGroups:
            - !Ref InstanceSecurityGroup
          Subnets:
            - !Ref mySubnet1
            - !Ref mySubnet2
      SchedulingStrategy: "REPLICA"
      CapacityProviderStrategy:
        - CapacityProvider: "FARGATE"
          Weight: 1
          Base: 0
      LoadBalancers:
      - TargetGroupArn:
          Ref: myTargetGroupSite
        ContainerPort: 80
        ContainerName: site-container

  myRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: myVPC
      Tags:
      - Key: stack
        Value: production

  mySubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: mySubnet1
      RouteTableId:
        Ref: myRouteTable

  mySubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: mySubnet2
      RouteTableId:
        Ref: myRouteTable

  myRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayToInternet
    Properties:
       RouteTableId:
         Ref: myRouteTable
       DestinationCidrBlock: 0.0.0.0/0
       GatewayId:
         Ref: myInternetGateway

  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
      - Key: stack
        Value: production

  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: myVPC
      InternetGatewayId:
        Ref: myInternetGateway

  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: stack
        Value: production

  mySubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: myVPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: "us-west-1b"
      Tags:
      - Key: stack
        Value: production

  mySubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      VpcId:
        Ref: myVPC
      CidrBlock: 10.0.100.0/24
      AvailabilityZone: "us-west-1c"
      Tags:
      - Key: stack
        Value: production

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId:
        Ref: myVPC
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        #   SourceSecurityGroupId: !Select
        #     - 0
        #     - !GetAtt
        #       - myLoadBalancer
        #       - SecurityGroups
        # - IpProtocol: tcp
        #   FromPort: '22'
        #   ToPort: '22'
      # SecurityGroupEgress:
      #   - IpProtocol: -1
      #     FromPort: 80
      #     ToPort: 80
      #     CidrIp: 0.0.0.0/0

  ECSTaskDefinition:
      Type: "AWS::ECS::TaskDefinition"
      Properties:
          ContainerDefinitions:
            -
              Essential: true
              Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/bot-repo:Latest"
              LogConfiguration:
                  LogDriver: "awslogs"
                  Options:
                      awslogs-create-group: "true"
                      awslogs-group: "/ecs/bot-task"
                      awslogs-region: !Ref AWS::Region
                      awslogs-stream-prefix: "ecs"
              Name: "bot-container"
              PortMappings:
                -
                  ContainerPort: 80
                  # HostPort: 80
                  # Protocol: "tcp"
          Family: "bot-task"
          TaskRoleArn: !ImportValue botDeployTaskRole
          ExecutionRoleArn: !ImportValue botecsTaskExecutionRole
          NetworkMode: "awsvpc"
          RequiresCompatibilities:
            - "FARGATE"
          Cpu: "1024"
          Memory: "3072"

  ECSTaskDefinitionSite:
      Type: "AWS::ECS::TaskDefinition"
      Properties:
          ContainerDefinitions:
            -
              Essential: true
              Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/bot-repo:LatestSite"
              LogConfiguration:
                  LogDriver: "awslogs"
                  Options:
                      awslogs-create-group: "true"
                      awslogs-group: "/ecs/bot-task"
                      awslogs-region: !Ref AWS::Region
                      awslogs-stream-prefix: "ecs"
              Name: "site-container"
              PortMappings:
                -
                  ContainerPort: 80
                  # HostPort: 80
                  # Protocol: "tcp"
          Family: "bot-task"
          TaskRoleArn: !ImportValue botDeployTaskRole
          ExecutionRoleArn: !ImportValue botecsTaskExecutionRole
          NetworkMode: "awsvpc"
          RequiresCompatibilities:
            - "FARGATE"
          Cpu: "1024"
          Memory: "3072"

  BotCodePipeline:
    Type: AWS::CodePipeline::Pipeline
    # DependsOn:
      # - ECSService
      # - ECSServiceSite
    Properties:
      Name: BotCodePipeline
      RoleArn: !ImportValue BotPipelineRole
      ArtifactStore:
        Location: !ImportValue BotS3Bucket
        Type: "S3"
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeStarSourceConnection
              Configuration:
                BranchName: !ImportValue GitHubBranchName
                ConnectionArn: !ImportValue BotGithubConnection
                FullRepositoryId: !ImportValue GitHubRepoName
                OutputArtifactFormat: "CODE_ZIP"
              OutputArtifacts:
                - Name: SourceArtifact
              Region: !Ref AWS::Region
              Namespace: "SourceVariables"
              RunOrder: 1
        - Name: "Build"
          Actions:
            - Name: "Build"
              ActionTypeId:
                Category: "Build"
                Owner: "AWS"
                Provider: "CodeBuild"
                Version: "1"
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: "SourceArtifact"
              OutputArtifacts:
                # - Name: "BuildArtifact"
                - Name: "secondary_artifact_name_1"
                - Name: "secondary_artifact_name_2"
              Region: !Ref AWS::Region
              Namespace: "BuildVariables"
              RunOrder: 1
        - Name: "DeployBot"
          Actions:
            - Name: "DeployMyBot"
              ActionTypeId:
                Category: "Deploy"
                Owner: "AWS"
                Provider: "ECS"
                Version: "1"
              Configuration:
                ClusterName: bot-cluster #!Ref ECSCluster
                ServiceName: bot-service #!GetAtt ECSService.Name
              InputArtifacts:
                - Name: "secondary_artifact_name_1"
                # - Name: "BuildArtifact"
              Region: !Ref AWS::Region
              Namespace: "DeployVariables"
              RunOrder: 1
        # - Name: "DeploySite"
        #   Actions:
            - Name: "DeployMySite"
              ActionTypeId:
                Category: "Deploy"
                Owner: "AWS"
                Provider: "ECS"
                Version: "1"
              Configuration:
                ClusterName: bot-cluster #!Ref ECSCluster
                ServiceName: site-service #!GetAtt ECSService.Name
              InputArtifacts:
                - Name: "secondary_artifact_name_2"
                # - Name: "BuildArtifact"
              Region: !Ref AWS::Region
              Namespace: "DeployVariablesSite"
              RunOrder: 1

  CodeBuildProject:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Name: BotCodeBuildProject # !Sub "${CodeBuildProject3}-3"
      Source:
        InsecureSsl: false
        Type: "CODEPIPELINE"
      Artifacts:
        EncryptionDisabled: false
        Name: BotCodeBuildProject # !Sub "${CodeBuildProject3}-3"
        Packaging: "NONE"
        Type: "CODEPIPELINE"
      Cache:
        Type: "NO_CACHE"
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/standard:4.0"
        ImagePullCredentialsType: "CODEBUILD"
        PrivilegedMode: true
        Type: "LINUX_CONTAINER"
      ServiceRole: !ImportValue BotCodeBuildRole
      TimeoutInMinutes: 60
      QueuedTimeoutInMinutes: 480
      LogsConfig:
        CloudWatchLogs:
          Status: "ENABLED"
        S3Logs:
          Status: "DISABLED"
          EncryptionDisabled: false
      Visibility: "PRIVATE"


  myLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/ecs/bot-task"
      RetentionInDays: 7

# -----------------QUEUE-----------------------------

  MyQueue:
    Properties:
      QueueName: MyQueue.fifo
      FifoQueue: true
      ContentBasedDeduplication: true
    Type: 'AWS::SQS::Queue'

Outputs:

  myLoadBalancerDNSName:
    Value: !GetAtt myLoadBalancer.DNSName
    Export:
      Name: myLoadBalancerDNSName

  myLoadBalancerCanonicalHostedZoneID:
    Value: !GetAtt myLoadBalancer.CanonicalHostedZoneID
    Export:
      Name: myLoadBalancerCanonicalHostedZoneID

  myVPC:
    Value: !Ref myVPC
    Export:
      Name: myVPC

# # -----------------QUEUE-----------------------------

#   MyQueue:
#     Properties:
#       QueueName: MyQueue.fifo
#       FifoQueue: true
#       ContentBasedDeduplication: true
#     Type: 'AWS::SQS::Queue'
# Outputs:
#   QueueName:
#     Description: The name of the queue
#     Value: !GetAtt
#       - MyQueue
#       - QueueName
#   QueueURL:
#     Description: The URL of the queue
#     Value: !Ref MyQueue
#   QueueARN:
#     Description: The ARN of the queue
#     Value: !GetAtt
#       - MyQueue
#       - Arn
