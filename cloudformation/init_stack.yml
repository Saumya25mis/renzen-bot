AWSTemplateFormatVersion: "2010-09-09"
Metadata:
  Generator: "me-test"
Description: "Sets up Github connection, Discord Secret, and s3 bucket. Exports values to be used for bot stack. ECR repo. console.aws.amazon.com/codesuite/settings/connections to finish setting up Github"

Resources:
  myRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: stack
          Value: production

  mySubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref mySubnet1
      RouteTableId:
        Ref: myRouteTable

  mySubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref mySubnet2
      RouteTableId:
        Ref: myRouteTable

  myRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId:
        Ref: myRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !ImportValue myInternetGateway

  myLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: "/ecs/bot-task"
      RetentionInDays: 30

  BotS3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "codepipeline-${AWS::Region}-bots3bucket"

  BotGithubConnection:
    Type: "AWS::CodeStarConnections::Connection"
    Properties:
      ConnectionName: GithubConnection
      ProviderType: GitHub

  ECRRepository:
    Type: "AWS::ECR::Repository"
    Properties:
      RepositoryName: "bot-repo"

  AWSServiceRoleForECS:
    Type: "AWS::IAM::ServiceLinkedRole"
    Properties:
      AWSServiceName: "ecs.amazonaws.com"
      Description: "Role to enable Amazon ECS to manage your cluster."

  IAMServiceLinkedRole:
    Type: "AWS::IAM::ServiceLinkedRole"
    Properties:
      AWSServiceName: "autoscaling.amazonaws.com"
      Description: "Default Service-Linked Role enables access to AWS Services and Resources used or managed by Auto Scaling"

  IAMServiceLinkedRole3:
    Type: "AWS::IAM::ServiceLinkedRole"
    Properties:
      AWSServiceName: "elasticloadbalancing.amazonaws.com"
      Description: "Allows ELB to call AWS services on your behalf."

  IAMServiceLinkedRole4:
    Type: "AWS::IAM::ServiceLinkedRole"
    Properties:
      AWSServiceName: "rds.amazonaws.com"
      Description: "Allows Amazon RDS to manage AWS resources on your behalf"

  # ROLES AND POLICIES

  botDeployTaskRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: "botDeployTaskRole"
      AssumeRolePolicyDocument: '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"ecs-tasks.amazonaws.com"},"Action":"sts:AssumeRole"}]}'
      MaxSessionDuration: 3600
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
        - "arn:aws:iam::aws:policy/SecretsManagerReadWrite"
        - "arn:aws:iam::aws:policy/AmazonSQSFullAccess"
        - "arn:aws:iam::aws:policy/AmazonRDSFullAccess"
      Description: "Allows EC2 instances to call AWS services on your behalf. And get secrets"

  botecsTaskExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/"
      RoleName: "botecsTaskExecutionRole"
      AssumeRolePolicyDocument: '{"Version":"2008-10-17","Statement":[{"Sid":"","Effect":"Allow","Principal":{"Service":"ecs-tasks.amazonaws.com"},"Action":"sts:AssumeRole"}]}'
      MaxSessionDuration: 3600
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
        - "arn:aws:iam::aws:policy/AmazonSQSFullAccess"
        - "arn:aws:iam::aws:policy/AmazonRDSFullAccess"

  BotPipelineRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/service-role/"
      RoleName: "BotPipelineRole"
      AssumeRolePolicyDocument: '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"codepipeline.amazonaws.com"},"Action":"sts:AssumeRole"}]}'
      MaxSessionDuration: 3600
      ManagedPolicyArns:
        - !Ref BotPipelineManagedPolicy

  BotPipelineManagedPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: "BotPipelineManagedPolicy"
      Path: "/service-role/"
      PolicyDocument: |
        {
            "Statement": [
                {
                  "Action": [
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:CompleteLayerUpload",
                    "ecr:GetAuthorizationToken",
                    "ecr:InitiateLayerUpload",
                    "ecr:PutImage",
                    "ecr:UploadLayerPart"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                },
                {
                    "Action": [
                        "iam:PassRole"
                    ],
                    "Resource": "*",
                    "Effect": "Allow",
                    "Condition": {
                        "StringEqualsIfExists": {
                            "iam:PassedToService": [
                                "cloudformation.amazonaws.com",
                                "elasticbeanstalk.amazonaws.com",
                                "ec2.amazonaws.com",
                                "ecs-tasks.amazonaws.com"
                            ]
                        }
                    }
                },
                {
                    "Action": [
                        "codecommit:CancelUploadArchive",
                        "codecommit:GetBranch",
                        "codecommit:GetCommit",
                        "codecommit:GetRepository",
                        "codecommit:GetUploadArchiveStatus",
                        "codecommit:UploadArchive"
                    ],
                    "Resource": "*",
                    "Effect": "Allow"
                },
                {
                    "Action": [
                        "codedeploy:CreateDeployment",
                        "codedeploy:GetApplication",
                        "codedeploy:GetApplicationRevision",
                        "codedeploy:GetDeployment",
                        "codedeploy:GetDeploymentConfig",
                        "codedeploy:RegisterApplicationRevision"
                    ],
                    "Resource": "*",
                    "Effect": "Allow"
                },
                {
                    "Action": [
                        "codestar-connections:UseConnection"
                    ],
                    "Resource": "*",
                    "Effect": "Allow"
                },
                {
                    "Action": [
                        "elasticbeanstalk:*",
                        "ec2:*",
                        "elasticloadbalancing:*",
                        "autoscaling:*",
                        "cloudwatch:*",
                        "s3:*",
                        "sns:*",
                        "cloudformation:*",
                        "rds:*",
                        "sqs:*",
                        "ecs:*"
                    ],
                    "Resource": "*",
                    "Effect": "Allow"
                },
                {
                    "Action": [
                        "lambda:InvokeFunction",
                        "lambda:ListFunctions"
                    ],
                    "Resource": "*",
                    "Effect": "Allow"
                },
                {
                    "Action": [
                        "opsworks:CreateDeployment",
                        "opsworks:DescribeApps",
                        "opsworks:DescribeCommands",
                        "opsworks:DescribeDeployments",
                        "opsworks:DescribeInstances",
                        "opsworks:DescribeStacks",
                        "opsworks:UpdateApp",
                        "opsworks:UpdateStack"
                    ],
                    "Resource": "*",
                    "Effect": "Allow"
                },
                {
                    "Action": [
                        "cloudformation:CreateStack",
                        "cloudformation:DeleteStack",
                        "cloudformation:DescribeStacks",
                        "cloudformation:UpdateStack",
                        "cloudformation:CreateChangeSet",
                        "cloudformation:DeleteChangeSet",
                        "cloudformation:DescribeChangeSet",
                        "cloudformation:ExecuteChangeSet",
                        "cloudformation:SetStackPolicy",
                        "cloudformation:ValidateTemplate"
                    ],
                    "Resource": "*",
                    "Effect": "Allow"
                },
                {
                    "Action": [
                        "codebuild:BatchGetBuilds",
                        "codebuild:StartBuild",
                        "codebuild:BatchGetBuildBatches",
                        "codebuild:StartBuildBatch"
                    ],
                    "Resource": "*",
                    "Effect": "Allow"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "devicefarm:ListProjects",
                        "devicefarm:ListDevicePools",
                        "devicefarm:GetRun",
                        "devicefarm:GetUpload",
                        "devicefarm:CreateUpload",
                        "devicefarm:ScheduleRun"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "servicecatalog:ListProvisioningArtifacts",
                        "servicecatalog:CreateProvisioningArtifact",
                        "servicecatalog:DescribeProvisioningArtifact",
                        "servicecatalog:DeleteProvisioningArtifact",
                        "servicecatalog:UpdateProduct"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "cloudformation:ValidateTemplate"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "ecr:DescribeImages"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "states:DescribeExecution",
                        "states:DescribeStateMachine",
                        "states:StartExecution"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "appconfig:StartDeployment",
                        "appconfig:StopDeployment",
                        "appconfig:GetDeployment"
                    ],
                    "Resource": "*"
                }
            ],
            "Version": "2012-10-17"
        }

  BotCodeBuildRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/service-role/"
      RoleName: BotCodeBuildRole
      AssumeRolePolicyDocument: '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"codebuild.amazonaws.com"},"Action":"sts:AssumeRole"}]}'
      MaxSessionDuration: 3600
      ManagedPolicyArns:
        - !Ref BotCodeBuildIAMManagedPolicy
        - "arn:aws:iam::aws:policy/SecretsManagerReadWrite"

  BotCodeBuildIAMManagedPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: BotCodeBuildIAMManagedPolicy
      Path: "/service-role/"
      PolicyDocument: !Sub |
        {
            "Version": "2012-10-17",
            "Statement": [
            {
                "Action": [
                "ecr:BatchCheckLayerAvailability",
                "ecr:CompleteLayerUpload",
                "ecr:GetAuthorizationToken",
                "ecr:InitiateLayerUpload",
                "ecr:PutImage",
                "ecr:UploadLayerPart"
                ],
                "Resource": "*",
                "Effect": "Allow"
            },
              {
                  "Effect": "Allow",
                  "Resource": [
                      "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/BotCodeBuildProject",
                      "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/BotCodeBuildProject:*"
                  ],
                  "Action": [
                      "logs:CreateLogGroup",
                      "logs:CreateLogStream",
                      "logs:PutLogEvents"
                  ]
              },
              {
                  "Effect": "Allow",
                  "Resource": [
                      "arn:aws:s3:::codepipeline-${AWS::Region}-*"
                  ],
                  "Action": [
                      "s3:PutObject",
                      "s3:GetObject",
                      "s3:GetObjectVersion",
                      "s3:GetBucketAcl",
                      "s3:GetBucketLocation"
                  ]
              },
              {
                  "Effect": "Allow",
                  "Action": [
                      "codebuild:CreateReportGroup",
                      "codebuild:CreateReport",
                      "codebuild:UpdateReport",
                      "codebuild:BatchPutCodeCoverages"
                  ],
                  "Resource": [
                      "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/BotCodeBuildProject-*"
                  ]
              }
            ]
        }

  MyQueue:
    Properties:
      QueueName: MyQueue.fifo
      FifoQueue: true
      ContentBasedDeduplication: true
    Type: "AWS::SQS::Queue"

  #----------------DB----------------------------------------
  #https://aws.amazon.com/blogs/security/how-to-create-and-retrieve-secrets-managed-in-aws-secrets-manager-using-aws-cloudformation-template/
  # Create a secret with the username admin and a randomly generated password in JSON.
  MyRDSInstanceRotationSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: "DBPassword"
      Description: "This is the secret for my RDS instance"
      GenerateSecretString:
        SecretStringTemplate: '{"username": "myadmin"}'
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\'

  # The secret (username and password for the superuser) will be dynamically
  # referenced. This ensures CloudFormation will not log or persist the resolved
  # value.
  MyDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      DBInstanceClass: db.t4g.micro
      Engine: postgres
      MasterUsername:
        !Join [
          "",
          [
            "{{resolve:secretsmanager:",
            !Ref MyRDSInstanceRotationSecret,
            ":SecretString:username}}",
          ],
        ]
      MasterUserPassword:
        !Join [
          "",
          [
            "{{resolve:secretsmanager:",
            !Ref MyRDSInstanceRotationSecret,
            ":SecretString:password}}",
          ],
        ]
      BackupRetentionPeriod: 0
      DBInstanceIdentifier: "rotation-instance"
      DBSubnetGroupName: !Ref DataSourceSubtNetGroup
      PubliclyAccessible: true
      VPCSecurityGroups:
        - !GetAtt RDSSecurityGroup.GroupId

  DataSourceSubtNetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Created by CF
      SubnetIds:
        - !Ref mySubnet1
        - !Ref mySubnet2

  mySubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      VpcId: !Ref myVPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: "us-west-1b"
      Tags:
        - Key: stack
          Value: production

  mySubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: true
      VpcId: !Ref myVPC
      CidrBlock: 10.0.100.0/24
      AvailabilityZone: "us-west-1c"
      Tags:
        - Key: stack
          Value: production

  # Update the referenced secret with properties of the RDS database.
  # This is required to enable rotation. To learn more, visit our documentation
  # https://docs.aws.amazon.com/secretsmanager/latest/userguide/rotating-secrets.html
  SecretRDSInstanceAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref MyRDSInstanceRotationSecret
      TargetId: !Ref MyDBInstance
      TargetType: AWS::RDS::DBInstance

  # Schedule rotating the secret every 30 days.
  # Note, the first rotation is triggered immediately.
  # This enables you to verify that rotation is configured appropriately.
  # Subsequent rotations are scheduled according to the configured rotation.
  # This example assumes that you have previously created a Lambda function to rotate secrets of this type.
  # Replace <% replace-with-lambda-arn %> with the ARN of your rotation Lambda function.
  # For details about rotation Lambdas, see:
  # https://docs.aws.amazon.com/secretsmanager/latest/userguide/rotating-secrets.html
  # MySecretRotationSchedule:
  #   Type: AWS::SecretsManager::RotationSchedule
  #   DependsOn: SecretRDSInstanceAttachment
  #   Properties:
  #     SecretId: !Ref MyRDSInstanceRotationSecret
  #     # Remember to update this place holder with the ARN of your rotation lambda
  #     RotationLambdaARN: <% replace-with-lambda-arn %>
  #     RotationRules:
  #       AutomaticallyAfterDays: 30

  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      Tags:
        - Key: stack
          Value: production

  LoadBalancerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Enable HTTP access on port 80
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: "80"
          ToPort: "80"
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: "80"
          ToPort: "80"
          CidrIp: 0.0.0.0/0

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId:
        Ref: myVPC
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow fargate service attach to RDS
      VpcId:
        Ref: myVPC
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !GetAtt InstanceSecurityGroup.GroupId

  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId:
        Ref: myInternetGateway

  myInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: stack
          Value: production

Outputs:
  GatewayToInternet:
    Value: !Ref GatewayToInternet
    Export:
      Name: GatewayToInternet

  myInternetGateway:
    Value: !Ref myInternetGateway
    Export:
      Name: myInternetGateway

  InstanceSecurityGroup:
    Value: !Ref InstanceSecurityGroup
    Export:
      Name: InstanceSecurityGroup

  LoadBalancerSecurityGroup:
    Value: !Ref LoadBalancerSecurityGroup
    Export:
      Name: LoadBalancerSecurityGroup

  BotS3Bucket:
    Value: !Ref BotS3Bucket
    Export:
      Name: BotS3Bucket

  myVPC:
    Value: !Ref myVPC
    Export:
      Name: myVPC

  mySubnet1:
    Value: !Ref mySubnet1
    Export:
      Name: mySubnet1

  mySubnet2:
    Value: !Ref mySubnet2
    Export:
      Name: mySubnet2

  BotGithubConnection:
    Value: !Ref BotGithubConnection
    Export:
      Name: BotGithubConnection

  ECRRepository:
    Value: !Ref ECRRepository
    Export:
      Name: ECRRepository

  botDeployTaskRole:
    Value: !GetAtt botDeployTaskRole.Arn
    Export:
      Name: botDeployTaskRole

  botecsTaskExecutionRole:
    Value: !GetAtt botecsTaskExecutionRole.Arn
    Export:
      Name: botecsTaskExecutionRole

  BotPipelineRole:
    Value: !GetAtt BotPipelineRole.Arn
    Export:
      Name: BotPipelineRole

  BotCodeBuildRole:
    Value: !GetAtt BotCodeBuildRole.Arn
    Export:
      Name: BotCodeBuildRole

  BotPipelineManagedPolicy:
    Value: !Ref BotPipelineManagedPolicy
    Export:
      Name: BotPipelineManagedPolicy

  BotCodeBuildIAMManagedPolicy:
    Value: !Ref BotCodeBuildIAMManagedPolicy
    Export:
      Name: BotCodeBuildIAMManagedPolicy

  QueueName:
    Description: The name of the queue
    Value: !GetAtt
      - MyQueue
      - QueueName
  QueueURL:
    Description: The URL of the queue
    Value: !Ref MyQueue
  QueueARN:
    Description: The ARN of the queue
    Value: !GetAtt
      - MyQueue
      - Arn
