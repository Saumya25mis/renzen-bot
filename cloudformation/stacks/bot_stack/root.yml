AWSTemplateFormatVersion: "2010-09-09"
Metadata:
  Generator: "me-test"
Description: "Stack used to start and stop bot and pipeline."

Resources:
  # nested stack
  StackInit:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: "https://cloudformation-files-renzen.s3.us-west-1.amazonaws.com/cloudformation/stacks/bot_stack/nested/init_stack.yml"
  ECSScalableTargetSite:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 1
      MinCapacity: 1
      RoleARN:
        Fn::Sub: "arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService"
      ServiceNamespace: ecs
      ScalableDimension: "ecs:service:DesiredCount"
      ResourceId: !Join
        - ""
        - - "service"
          - !Ref ECSCluster
          - !GetAtt ECSServiceSite.Name

  myLoadBalancerSite:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: StackInit
    Properties:
      Name: myLoadBalancerSite
      SecurityGroups:
        - !GetAtt StackInit.Outputs.LoadBalancerSecurityGroup
      Subnets:
        - !GetAtt StackInit.Outputs.mySubnet1
        - !GetAtt StackInit.Outputs.mySubnet2

  myListenerSite:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref myLoadBalancerSite
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref myTargetGroupSite

  myTargetGroupSite:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckPort: 80
      HealthCheckTimeoutSeconds: 10
      HealthCheckIntervalSeconds: 15
      HealthyThresholdCount: 2
      Name: myTargetGroupSite
      Port: 80
      Protocol: HTTP
      TargetType: ip
      VpcId: !GetAtt StackInit.Outputs.myVPC

  ECSCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: "bot-cluster"
      CapacityProviders:
        - "FARGATE"
        - "FARGATE_SPOT"

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: "bot-service"
      Cluster:
        Ref: "ECSCluster"
      DesiredCount: 1
      TaskDefinition:
        Ref: "ECSTaskDefinition"
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: "ENABLED"
          SecurityGroups:
            - !GetAtt StackInit.Outputs.InstanceSecurityGroup
          Subnets:
            - !GetAtt StackInit.Outputs.mySubnet1
            - !GetAtt StackInit.Outputs.mySubnet2
      SchedulingStrategy: "REPLICA"
      CapacityProviderStrategy:
        - CapacityProvider: "FARGATE"
          Weight: 1
          Base: 0

  ECSServiceSite:
    Type: AWS::ECS::Service
    DependsOn: myListenerSite
    Properties:
      ServiceName: "site-service"
      Cluster:
        Ref: "ECSCluster"
      DesiredCount: 1
      TaskDefinition:
        Ref: "ECSTaskDefinitionSite"
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: "ENABLED"
          SecurityGroups:
            - !GetAtt StackInit.Outputs.InstanceSecurityGroup
          Subnets:
            - !GetAtt StackInit.Outputs.mySubnet1
            - !GetAtt StackInit.Outputs.mySubnet2
      SchedulingStrategy: "REPLICA"
      CapacityProviderStrategy:
        - CapacityProvider: "FARGATE"
          Weight: 1
          Base: 0
      LoadBalancers:
        - TargetGroupArn:
            Ref: myTargetGroupSite
          ContainerPort: 80
          ContainerName: site-container

  ECSTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/bot-repo:LatestBot"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-create-group: "true"
              awslogs-group: "bot-task"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: "task"
          Name: "bot-container"
          PortMappings:
            - ContainerPort: 80
      Family: "bot-task"
      TaskRoleArn: !ImportValue botDeployTaskRole
      ExecutionRoleArn: !ImportValue botecsTaskExecutionRole
      NetworkMode: "awsvpc"
      RequiresCompatibilities:
        - "FARGATE"
      Cpu: "1024"
      Memory: "3072"

  ECSTaskDefinitionSite:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      ContainerDefinitions:
        - Essential: true
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/bot-repo:LatestSite"
          LogConfiguration:
            LogDriver: "awslogs"
            Options:
              awslogs-create-group: "true"
              awslogs-group: "bot-site"
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: "site"
          Name: "site-container"
          PortMappings:
            - ContainerPort: 80
      Family: "site-task"
      TaskRoleArn: !ImportValue botDeployTaskRole
      ExecutionRoleArn: !ImportValue botecsTaskExecutionRole
      NetworkMode: "awsvpc"
      RequiresCompatibilities:
        - "FARGATE"
      Cpu: "1024"
      Memory: "3072"

  myDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: Z07096223ERVZ2460AEFE # FROM CONSOLE
      Comment: DNS name for my instance.
      Name: "api.renzen.io"
      Type: A
      AliasTarget:
        DNSName: !GetAtt myLoadBalancerSite.DNSName
        HostedZoneId: !GetAtt myLoadBalancerSite.CanonicalHostedZoneID
