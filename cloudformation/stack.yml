AWSTemplateFormatVersion: "2010-09-09"
Metadata:
    Generator: "me-test"
Description: ""

Parameters:
  DiscordTokenParameter:
    Type: String
    Description: Parameter to set up Bot

  GitHubRepoName:
    Type: String
    Description: Parameter to set up Bot

  GitHubBranchName:
    Type: String
    Default: "main"
    Description: Parameter to set up Bot


Resources:
  SecretsManagerSecret:
      Type: "AWS::SecretsManager::Secret"
      Properties:
          Name: "BotDiscordToken"
          SecretString: !Ref DiscordTokenParameter

  ECSCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
        ClusterName: "bot-cluster"
        CapacityProviders:
        - "FARGATE"
        - "FARGATE_SPOT"

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: "bot-service"
      Cluster:
        Ref: "ECSCluster"
      DesiredCount: 1
      TaskDefinition:
        Ref: "ECSTaskDefinition"
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: "ENABLED"
          SecurityGroups:
            - !Ref InstanceSecurityGroup
          Subnets:
            - !Ref mySubnet1
            - !Ref mySubnet2
      SchedulingStrategy: "REPLICA"
      CapacityProviderStrategy:
        -
          CapacityProvider: "FARGATE"
          Weight: 1
          Base: 0

  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
      - Key: stack
        Value: production

  mySubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: "us-west-1b"
      Tags:
      - Key: stack
        Value: production

  mySubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: myVPC
      CidrBlock: 10.0.100.0/24
      AvailabilityZone: "us-west-1c"
      Tags:
      - Key: stack
        Value: production

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId:
        Ref: myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  ECRRepository:
    Type: "AWS::ECR::Repository"
    Properties:
        RepositoryName: "bot-repo"

  ECSTaskDefinition:
      Type: "AWS::ECS::TaskDefinition"
      Properties:
          ContainerDefinitions:
            -
              Essential: true
              Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/bot-repo:Latest"
              LogConfiguration:
                  LogDriver: "awslogs"
                  Options:
                      awslogs-create-group: "true"
                      awslogs-group: "/ecs/bot-task"
                      awslogs-region: !Ref AWS::Region
                      awslogs-stream-prefix: "ecs"
              Name: "bot-container"
              PortMappings:
                -
                  ContainerPort: 80
                  HostPort: 80
                  Protocol: "tcp"
          Family: "bot-task"
          TaskRoleArn: !GetAtt botDeployTaskRole.Arn
          ExecutionRoleArn: !GetAtt botecsTaskExecutionRole.Arn
          NetworkMode: "awsvpc"
          RequiresCompatibilities:
            - "FARGATE"
          Cpu: "1024"
          Memory: "3072"

  # ROLES
  botDeployTaskRole:
      Type: "AWS::IAM::Role"
      Properties:
          Path: "/"
          RoleName: "botDeployTaskRole"
          AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ecs-tasks.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
          MaxSessionDuration: 3600
          ManagedPolicyArns:
            - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
            - "arn:aws:iam::aws:policy/SecretsManagerReadWrite"
          Description: "Allows EC2 instances to call AWS services on your behalf. And get secrets"

  botecsTaskExecutionRole:
      Type: "AWS::IAM::Role"
      Properties:
          Path: "/"
          RoleName: "botecsTaskExecutionRole"
          AssumeRolePolicyDocument: "{\"Version\":\"2008-10-17\",\"Statement\":[{\"Sid\":\"\",\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ecs-tasks.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
          MaxSessionDuration: 3600
          ManagedPolicyArns:
            - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"

  BotS3Bucket:
      Type: "AWS::S3::Bucket"
      Properties:
          BucketName: !Sub "codepipeline-${AWS::Region}-bots3bucket"

  BotGithubConnection:
    Type: 'AWS::CodeStarConnections::Connection'
    Properties:
      ConnectionName: GithubConnection
      ProviderType: GitHub

  BotCodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt BotPipelineRole.Arn
      Stages:
        -
          Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeStarSourceConnection
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                ConnectionArn: !Ref BotGithubConnection
                BranchName: !Ref GitHubBranchName
                FullRepositoryId: !Ref GitHubRepoName
                # username/repository
              RunOrder: 1
          Name: "Build"
          Actions:
            -
              Name: "Build"
              ActionTypeId:
                  Category: "Build"
                  Owner: "AWS"
                  Provider: "CodeBuild"
                  Version: "1"
              Configuration:
                  # EnvironmentVariables: !Sub "[{\"name\":\"AWS_DEFAULT_REGION\",\"value\":\"${AWS::Region}\",\"type\":\"PLAINTEXT\"},{\"name\":\"AWS_ACCOUNT_ID\",\"value\":\"${AWS::AccountId}\",\"type\":\"PLAINTEXT\"},{\"name\":\"IMAGE_TAG\",\"value\":\"Latest\",\"type\":\"PLAINTEXT\"},{\"name\":\"IMAGE_REPO_NAME\",\"value\":\"eklie-repo\",\"type\":\"PLAINTEXT\"}]"
                  ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                -
                  Name: "SourceArtifact"
              OutputArtifacts:
                -
                  Name: "BuildArtifact"
              Region: !Ref AWS::Region
              Namespace: "BuildVariables"
              RunOrder: 1
        -
          Name: "Deploy"
          Actions:
            -
              Name: "Deploy"
              ActionTypeId:
                  Category: "Deploy"
                  Owner: "AWS"
                  Provider: "ECS"
                  Version: "1"
              Configuration:
                  ClusterName: !Ref ECSCluster
                  ServiceName: !GetAtt ECSService.Name
              InputArtifacts:
                -
                  Name: "BuildArtifact"
              Region: !Ref AWS::Region
              Namespace: "DeployVariables"
              RunOrder: 1

  CodeBuildProject:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Name: BotCodeBuildProject # !Sub "${CodeBuildProject3}-3"
      Source:
          InsecureSsl: false
          Type: "CODEPIPELINE"
      Artifacts:
          EncryptionDisabled: false
          Name: BotCodeBuildProject # !Sub "${CodeBuildProject3}-3"
          Packaging: "NONE"
          Type: "CODEPIPELINE"
      Cache:
          Type: "NO_CACHE"
      Environment:
          ComputeType: "BUILD_GENERAL1_SMALL"
          # EnvironmentVariables:
          #   -
          #     Name: "AWS_DEFAULT_REGION"
          #     Type: "PLAINTEXT"
          #     Value: !Ref AWS::Region
          #   -
          #     Name: "AWS_ACCOUNT_ID "
          #     Type: "PLAINTEXT"
          #     Value: !Ref AWS::AccountId
          #   -
          #     Name: "IMAGE_TAG"
          #     Type: "PLAINTEXT"
          #     Value: "Latest"
          #   -
          #     Name: "IMAGE_REPO_NAME"
          #     Type: "PLAINTEXT"
          #     Value: "eklie-repo"
          Image: "aws/codebuild/standard:4.0"
          ImagePullCredentialsType: "CODEBUILD"
          PrivilegedMode: true
          Type: "LINUX_CONTAINER"
      ServiceRole: !GetAtt BotCodeBuildRole.Arn
      TimeoutInMinutes: 60
      QueuedTimeoutInMinutes: 480
      # EncryptionKey: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/s3"
      # BadgeEnabled: false
      LogsConfig:
          CloudWatchLogs:
              Status: "ENABLED"
          S3Logs:
              Status: "DISABLED"
              EncryptionDisabled: false
      Visibility: "PRIVATE"
  #-------------------------------------------------
  BotPipelineRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/service-role/"
      RoleName: "BotPipelineRole"
      AssumeRolePolicyDocument: '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"codepipeline.amazonaws.com"},"Action":"sts:AssumeRole"}]}'
      MaxSessionDuration: 3600
      ManagedPolicyArns:
        - !Ref BotPipelineManagedPolicy

  BotPipelineManagedPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: "BotPipelineManagedPolicy"
      Path: "/service-role/"
      PolicyDocument: |
        {
            "Statement": [
                {
                  "Action": [
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:CompleteLayerUpload",
                    "ecr:GetAuthorizationToken",
                    "ecr:InitiateLayerUpload",
                    "ecr:PutImage",
                    "ecr:UploadLayerPart"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                },
                {
                    "Action": [
                        "iam:PassRole"
                    ],
                    "Resource": "*",
                    "Effect": "Allow",
                    "Condition": {
                        "StringEqualsIfExists": {
                            "iam:PassedToService": [
                                "cloudformation.amazonaws.com",
                                "elasticbeanstalk.amazonaws.com",
                                "ec2.amazonaws.com",
                                "ecs-tasks.amazonaws.com"
                            ]
                        }
                    }
                },
                {
                    "Action": [
                        "codecommit:CancelUploadArchive",
                        "codecommit:GetBranch",
                        "codecommit:GetCommit",
                        "codecommit:GetRepository",
                        "codecommit:GetUploadArchiveStatus",
                        "codecommit:UploadArchive"
                    ],
                    "Resource": "*",
                    "Effect": "Allow"
                },
                {
                    "Action": [
                        "codedeploy:CreateDeployment",
                        "codedeploy:GetApplication",
                        "codedeploy:GetApplicationRevision",
                        "codedeploy:GetDeployment",
                        "codedeploy:GetDeploymentConfig",
                        "codedeploy:RegisterApplicationRevision"
                    ],
                    "Resource": "*",
                    "Effect": "Allow"
                },
                {
                    "Action": [
                        "codestar-connections:UseConnection"
                    ],
                    "Resource": "*",
                    "Effect": "Allow"
                },
                {
                    "Action": [
                        "elasticbeanstalk:*",
                        "ec2:*",
                        "elasticloadbalancing:*",
                        "autoscaling:*",
                        "cloudwatch:*",
                        "s3:*",
                        "sns:*",
                        "cloudformation:*",
                        "rds:*",
                        "sqs:*",
                        "ecs:*"
                    ],
                    "Resource": "*",
                    "Effect": "Allow"
                },
                {
                    "Action": [
                        "lambda:InvokeFunction",
                        "lambda:ListFunctions"
                    ],
                    "Resource": "*",
                    "Effect": "Allow"
                },
                {
                    "Action": [
                        "opsworks:CreateDeployment",
                        "opsworks:DescribeApps",
                        "opsworks:DescribeCommands",
                        "opsworks:DescribeDeployments",
                        "opsworks:DescribeInstances",
                        "opsworks:DescribeStacks",
                        "opsworks:UpdateApp",
                        "opsworks:UpdateStack"
                    ],
                    "Resource": "*",
                    "Effect": "Allow"
                },
                {
                    "Action": [
                        "cloudformation:CreateStack",
                        "cloudformation:DeleteStack",
                        "cloudformation:DescribeStacks",
                        "cloudformation:UpdateStack",
                        "cloudformation:CreateChangeSet",
                        "cloudformation:DeleteChangeSet",
                        "cloudformation:DescribeChangeSet",
                        "cloudformation:ExecuteChangeSet",
                        "cloudformation:SetStackPolicy",
                        "cloudformation:ValidateTemplate"
                    ],
                    "Resource": "*",
                    "Effect": "Allow"
                },
                {
                    "Action": [
                        "codebuild:BatchGetBuilds",
                        "codebuild:StartBuild",
                        "codebuild:BatchGetBuildBatches",
                        "codebuild:StartBuildBatch"
                    ],
                    "Resource": "*",
                    "Effect": "Allow"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "devicefarm:ListProjects",
                        "devicefarm:ListDevicePools",
                        "devicefarm:GetRun",
                        "devicefarm:GetUpload",
                        "devicefarm:CreateUpload",
                        "devicefarm:ScheduleRun"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "servicecatalog:ListProvisioningArtifacts",
                        "servicecatalog:CreateProvisioningArtifact",
                        "servicecatalog:DescribeProvisioningArtifact",
                        "servicecatalog:DeleteProvisioningArtifact",
                        "servicecatalog:UpdateProduct"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "cloudformation:ValidateTemplate"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "ecr:DescribeImages"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "states:DescribeExecution",
                        "states:DescribeStateMachine",
                        "states:StartExecution"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "appconfig:StartDeployment",
                        "appconfig:StopDeployment",
                        "appconfig:GetDeployment"
                    ],
                    "Resource": "*"
                }
            ],
            "Version": "2012-10-17"
        }

  BotCodeBuildRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/service-role/"
      RoleName: BotCodeBuildRole
      AssumeRolePolicyDocument: '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"codebuild.amazonaws.com"},"Action":"sts:AssumeRole"}]}'
      MaxSessionDuration: 3600
      ManagedPolicyArns:
        - !Ref BotCodeBuildIAMManagedPolicy

  BotCodeBuildIAMManagedPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: BotCodeBuildIAMManagedPolicy
      Path: "/service-role/"
      # "codebuild:BatchPut${IAMGroup}Cases",
      PolicyDocument: !Sub |
        {
            "Version": "2012-10-17",
            "Statement": [
              {
                  "Effect": "Allow",
                  "Resource": [
                      "arn:aws:s3:::codepipeline-${AWS::Region}-*"
                  ],
                  "Action": [
                      "s3:PutObject",
                      "s3:GetObject",
                      "s3:GetObjectVersion",
                      "s3:GetBucketAcl",
                      "s3:GetBucketLocation"
                  ]
              }
            ]
        }
