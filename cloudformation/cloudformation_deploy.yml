AWSTemplateFormatVersion: "2010-09-09"
Metadata:
  Generator: "me-test"
Description: ""

Resources:
  AccountBaseS3Bucket:
    Type: "AWS::S3::Bucket"
    # DeletionPolicy: Retain
    # UpdateReplacePolicy: Retain
    Properties:
      BucketName: "cloudformation-files-renzen"

  BotCodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: BotCodePipeline
      RoleArn: !GetAtt BotPipelineRole.Arn
      ArtifactStore:
        Location: !Ref AccountBaseS3Bucket
        Type: "S3"
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeStarSourceConnection
              Configuration:
                BranchName: !ImportValue GitHubBranchName
                ConnectionArn: !ImportValue BotGithubConnection
                FullRepositoryId: !ImportValue GitHubRepoName
                OutputArtifactFormat: "CODE_ZIP"
              OutputArtifacts:
                - Name: SourceArtifact
              Region: !Ref AWS::Region
              Namespace: "SourceVariables"
              RunOrder: 1
        - Name: "Build"
          Actions:
            - Name: "Build"
              ActionTypeId:
                Category: "Build"
                Owner: "AWS"
                Provider: "CodeBuild"
                Version: "1"
              Configuration:
                ProjectName: !Ref BotCodeBuildProject
              InputArtifacts:
                - Name: "SourceArtifact"
              OutputArtifacts:
                - Name: "secondary_artifact_name_1"
                - Name: "secondary_artifact_name_2"
              Region: !Ref AWS::Region
              Namespace: "BuildVariables"
              RunOrder: 1

  BotCodeBuildProject:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Name: BotCodeBuildProject
      Source:
        InsecureSsl: false
        Type: "CODEPIPELINE"
        BuildSpec: "buildspecs/cloudformation_deploy_buildspec.yml"
      Artifacts:
        EncryptionDisabled: false
        Name: BotCodeBuildProject
        Packaging: "NONE"
        Type: "CODEPIPELINE"
      Cache:
        Type: "NO_CACHE"
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/standard:4.0"
        ImagePullCredentialsType: "CODEBUILD"
        PrivilegedMode: true
        Type: "LINUX_CONTAINER"
      ServiceRole: !GetAtt BotCodeBuildRole.Arn
      TimeoutInMinutes: 60
      QueuedTimeoutInMinutes: 480
      LogsConfig:
        CloudWatchLogs:
          Status: "ENABLED"
        S3Logs:
          Status: "DISABLED"
          EncryptionDisabled: false
      Visibility: "PRIVATE"

  BotPipelineRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/service-role/"
      RoleName: "BotPipelineRole"
      AssumeRolePolicyDocument: '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"codepipeline.amazonaws.com"},"Action":"sts:AssumeRole"}]}'
      MaxSessionDuration: 3600
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  BotCodeBuildRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/service-role/"
      RoleName: BotCodeBuildRole
      AssumeRolePolicyDocument: '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"codebuild.amazonaws.com"},"Action":"sts:AssumeRole"}]}'
      MaxSessionDuration: 3600
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

Outputs:
  BotPipelineRole:
    Value: !GetAtt BotPipelineRole.Arn
    Export:
      Name: BotPipelineRole

  BotCodeBuildRole:
    Value: !GetAtt BotCodeBuildRole.Arn
    Export:
      Name: BotCodeBuildRole

  BotCodeBuildIAMManagedPolicy:
    Value: !Ref BotCodeBuildIAMManagedPolicy
    Export:
      Name: BotCodeBuildIAMManagedPolicy
