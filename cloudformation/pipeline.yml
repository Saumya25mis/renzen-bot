AWSTemplateFormatVersion: "2010-09-09"
Metadata:
    Generator: "me-test"
Description: ""

Parameters:
  DiscordTokenParameter:
    Type: String
    Description: Parameter to set up Bot

  GitHubRepoName:
    Type: String
    Description: Parameter to set up Bot

  GitHubBranchName:
    Type: String
    Default: "main"
    Description: Parameter to set up Bot

Resources:
  BotS3Bucket:
      Type: "AWS::S3::Bucket"
      Properties:
          BucketName: !Sub "codepipeline-${AWS::Region}-bots3bucket"

  BotGithubConnection:
    Type: 'AWS::CodeStarConnections::Connection'
    Properties:
      ConnectionName: GithubConnection
      ProviderType: GitHub

  BotCodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: BotCodePipeline
      RoleArn: !GetAtt BotPipelineRole.Arn
      ArtifactStore:
        Location: !Ref BotS3Bucket
        Type: "S3"
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeStarSourceConnection
              Configuration:
                BranchName: !Ref GitHubBranchName
                ConnectionArn: !Ref BotGithubConnection
                FullRepositoryId: !Ref GitHubRepoName
                OutputArtifactFormat: "CODE_ZIP"
              OutputArtifacts:
                - Name: SourceArtifact
              Region: !Ref AWS::Region
              Namespace: "SourceVariables"
              RunOrder: 1
        - Name: "Build"
          Actions:
            - Name: "Build"
              ActionTypeId:
                  Category: "Build"
                  Owner: "AWS"
                  Provider: "CodeBuild"
                  Version: "1"
              Configuration:
                  # EnvironmentVariables: !Sub "[{\"name\":\"AWS_DEFAULT_REGION\",\"value\":\"${AWS::Region}\",\"type\":\"PLAINTEXT\"},{\"name\":\"AWS_ACCOUNT_ID\",\"value\":\"${AWS::AccountId}\",\"type\":\"PLAINTEXT\"},{\"name\":\"IMAGE_TAG\",\"value\":\"Latest\",\"type\":\"PLAINTEXT\"},{\"name\":\"IMAGE_REPO_NAME\",\"value\":\"eklie-repo\",\"type\":\"PLAINTEXT\"}]"
                  ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                -
                  Name: "SourceArtifact"
              OutputArtifacts:
                -
                  Name: "BuildArtifact"
              Region: !Ref AWS::Region
              Namespace: "BuildVariables"
              RunOrder: 1
        -
          Name: "Deploy"
          Actions:
            - Name: "Deploy"
              ActionTypeId:
                  Category: "Deploy"
                  Owner: "AWS"
                  Provider: "ECS"
                  Version: "1"
              Configuration:
                  ClusterName: bot-cluster #!Ref ECSCluster
                  ServiceName: bot-service #!GetAtt ECSService.Name
              InputArtifacts:
                - Name: "BuildArtifact"
              Region: !Ref AWS::Region
              Namespace: "DeployVariables"
              RunOrder: 1

  CodeBuildProject:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Name: BotCodeBuildProject # !Sub "${CodeBuildProject3}-3"
      Source:
          InsecureSsl: false
          Type: "CODEPIPELINE"
      Artifacts:
          EncryptionDisabled: false
          Name: BotCodeBuildProject # !Sub "${CodeBuildProject3}-3"
          Packaging: "NONE"
          Type: "CODEPIPELINE"
      Cache:
          Type: "NO_CACHE"
      Environment:
          ComputeType: "BUILD_GENERAL1_SMALL"
          # EnvironmentVariables:
          #   -
          #     Name: "AWS_DEFAULT_REGION"
          #     Type: "PLAINTEXT"
          #     Value: !Ref AWS::Region
          #   -
          #     Name: "AWS_ACCOUNT_ID "
          #     Type: "PLAINTEXT"
          #     Value: !Ref AWS::AccountId
          #   -
          #     Name: "IMAGE_TAG"
          #     Type: "PLAINTEXT"
          #     Value: "Latest"
          #   -
          #     Name: "IMAGE_REPO_NAME"
          #     Type: "PLAINTEXT"
          #     Value: "eklie-repo"
          Image: "aws/codebuild/standard:4.0"
          ImagePullCredentialsType: "CODEBUILD"
          PrivilegedMode: true
          Type: "LINUX_CONTAINER"
      ServiceRole: !GetAtt BotCodeBuildRole.Arn
      TimeoutInMinutes: 60
      QueuedTimeoutInMinutes: 480
      # EncryptionKey: !Sub "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/aws/s3"
      # BadgeEnabled: false
      LogsConfig:
          CloudWatchLogs:
              Status: "ENABLED"
          S3Logs:
              Status: "DISABLED"
              EncryptionDisabled: false
      Visibility: "PRIVATE"
  #-------------------------------------------------
  BotPipelineRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/service-role/"
      RoleName: "BotPipelineRole"
      AssumeRolePolicyDocument: '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"codepipeline.amazonaws.com"},"Action":"sts:AssumeRole"}]}'
      MaxSessionDuration: 3600
      ManagedPolicyArns:
        - !Ref BotPipelineManagedPolicy

  BotPipelineManagedPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: "BotPipelineManagedPolicy"
      Path: "/service-role/"
      PolicyDocument: |
        {
            "Statement": [
                {
                  "Action": [
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:CompleteLayerUpload",
                    "ecr:GetAuthorizationToken",
                    "ecr:InitiateLayerUpload",
                    "ecr:PutImage",
                    "ecr:UploadLayerPart"
                  ],
                  "Resource": "*",
                  "Effect": "Allow"
                },
                {
                    "Action": [
                        "iam:PassRole"
                    ],
                    "Resource": "*",
                    "Effect": "Allow",
                    "Condition": {
                        "StringEqualsIfExists": {
                            "iam:PassedToService": [
                                "cloudformation.amazonaws.com",
                                "elasticbeanstalk.amazonaws.com",
                                "ec2.amazonaws.com",
                                "ecs-tasks.amazonaws.com"
                            ]
                        }
                    }
                },
                {
                    "Action": [
                        "codecommit:CancelUploadArchive",
                        "codecommit:GetBranch",
                        "codecommit:GetCommit",
                        "codecommit:GetRepository",
                        "codecommit:GetUploadArchiveStatus",
                        "codecommit:UploadArchive"
                    ],
                    "Resource": "*",
                    "Effect": "Allow"
                },
                {
                    "Action": [
                        "codedeploy:CreateDeployment",
                        "codedeploy:GetApplication",
                        "codedeploy:GetApplicationRevision",
                        "codedeploy:GetDeployment",
                        "codedeploy:GetDeploymentConfig",
                        "codedeploy:RegisterApplicationRevision"
                    ],
                    "Resource": "*",
                    "Effect": "Allow"
                },
                {
                    "Action": [
                        "codestar-connections:UseConnection"
                    ],
                    "Resource": "*",
                    "Effect": "Allow"
                },
                {
                    "Action": [
                        "elasticbeanstalk:*",
                        "ec2:*",
                        "elasticloadbalancing:*",
                        "autoscaling:*",
                        "cloudwatch:*",
                        "s3:*",
                        "sns:*",
                        "cloudformation:*",
                        "rds:*",
                        "sqs:*",
                        "ecs:*"
                    ],
                    "Resource": "*",
                    "Effect": "Allow"
                },
                {
                    "Action": [
                        "lambda:InvokeFunction",
                        "lambda:ListFunctions"
                    ],
                    "Resource": "*",
                    "Effect": "Allow"
                },
                {
                    "Action": [
                        "opsworks:CreateDeployment",
                        "opsworks:DescribeApps",
                        "opsworks:DescribeCommands",
                        "opsworks:DescribeDeployments",
                        "opsworks:DescribeInstances",
                        "opsworks:DescribeStacks",
                        "opsworks:UpdateApp",
                        "opsworks:UpdateStack"
                    ],
                    "Resource": "*",
                    "Effect": "Allow"
                },
                {
                    "Action": [
                        "cloudformation:CreateStack",
                        "cloudformation:DeleteStack",
                        "cloudformation:DescribeStacks",
                        "cloudformation:UpdateStack",
                        "cloudformation:CreateChangeSet",
                        "cloudformation:DeleteChangeSet",
                        "cloudformation:DescribeChangeSet",
                        "cloudformation:ExecuteChangeSet",
                        "cloudformation:SetStackPolicy",
                        "cloudformation:ValidateTemplate"
                    ],
                    "Resource": "*",
                    "Effect": "Allow"
                },
                {
                    "Action": [
                        "codebuild:BatchGetBuilds",
                        "codebuild:StartBuild",
                        "codebuild:BatchGetBuildBatches",
                        "codebuild:StartBuildBatch"
                    ],
                    "Resource": "*",
                    "Effect": "Allow"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "devicefarm:ListProjects",
                        "devicefarm:ListDevicePools",
                        "devicefarm:GetRun",
                        "devicefarm:GetUpload",
                        "devicefarm:CreateUpload",
                        "devicefarm:ScheduleRun"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "servicecatalog:ListProvisioningArtifacts",
                        "servicecatalog:CreateProvisioningArtifact",
                        "servicecatalog:DescribeProvisioningArtifact",
                        "servicecatalog:DeleteProvisioningArtifact",
                        "servicecatalog:UpdateProduct"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "cloudformation:ValidateTemplate"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "ecr:DescribeImages"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "states:DescribeExecution",
                        "states:DescribeStateMachine",
                        "states:StartExecution"
                    ],
                    "Resource": "*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "appconfig:StartDeployment",
                        "appconfig:StopDeployment",
                        "appconfig:GetDeployment"
                    ],
                    "Resource": "*"
                }
            ],
            "Version": "2012-10-17"
        }

  BotCodeBuildRole:
    Type: "AWS::IAM::Role"
    Properties:
      Path: "/service-role/"
      RoleName: BotCodeBuildRole
      AssumeRolePolicyDocument: '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"codebuild.amazonaws.com"},"Action":"sts:AssumeRole"}]}'
      MaxSessionDuration: 3600
      ManagedPolicyArns:
        - !Ref BotCodeBuildIAMManagedPolicy

  BotCodeBuildIAMManagedPolicy:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      ManagedPolicyName: BotCodeBuildIAMManagedPolicy
      Path: "/service-role/"
      # "codebuild:BatchPut${IAMGroup}Cases",
      PolicyDocument: !Sub |
        {
            "Version": "2012-10-17",
            "Statement": [
              {
                  "Effect": "Allow",
                  "Resource": [
                      "arn:aws:s3:::codepipeline-${AWS::Region}-*"
                  ],
                  "Action": [
                      "s3:PutObject",
                      "s3:GetObject",
                      "s3:GetObjectVersion",
                      "s3:GetBucketAcl",
                      "s3:GetBucketLocation"
                  ]
              }
            ]
        }
