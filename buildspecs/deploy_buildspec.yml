version: 0.2

# env:
  # secrets-manager:
  #   AWS_ACCOUNT_ID: "BotAWSAccountID"
  # variables:
  #   IMAGE_TAG: "LatestBot"
  #   IMAGE_TAG_SITE: "LatestSite"
  #   IMAGE_REPO_NAME: "bot-repo"

phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...

      - AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
      - IMAGE_TAG="${CURRENT_ENVIRONMENT}-LatestBot"
      - IMAGE_TAG_SITE="${CURRENT_ENVIRONMENT}-LatestSite"
      - IMAGE_REPO_NAME="${CURRENT_ENVIRONMENT}-bot-repo"

      - echo $AWS_ACCOUNT_ID
      - echo $IMAGE_TAG
      - echo $IMAGE_TAG_SITE
      - echo $IMAGE_REPO_NAME

      - echo $CURRENT_ENVIRONMENT

      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - pip3 install pytest
      # - echo deregistering tasks...
      # - python3 scripts/deregister_tasks.py  # move in future only desirable if build is successful...
  build:
    on-failure: ABORT
    commands:
      - echo Build started on `date`

      - printenv

      - AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
      - IMAGE_TAG="${CURRENT_ENVIRONMENT}-LatestBot"
      - IMAGE_TAG_SITE="${CURRENT_ENVIRONMENT}-LatestSite"
      - IMAGE_REPO_NAME="${CURRENT_ENVIRONMENT}-bot-repo"

      - echo $AWS_ACCOUNT_ID
      - echo $IMAGE_TAG
      - echo $IMAGE_TAG_SITE
      - echo $IMAGE_REPO_NAME

      - echo Building the Docker image bot...
      # Builds using Dockerfile named "Dockerfile" in root as context by default
      # Name and optionally a tag in the 'name:tag' format
      - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG -f src/bot/Dockerfile .  # `-t tag .`
      # tags built image with registry host name to push to private repository
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG

      - echo Building the Docker image site...
      - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG_SITE -f src/site/Dockerfile .
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG_SITE $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG_SITE
  post_build:
    on-failure: ABORT
    commands:
      - echo Build completed on `date`

      - AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
      - IMAGE_TAG="${CURRENT_ENVIRONMENT}-LatestBot"
      - IMAGE_TAG_SITE="${CURRENT_ENVIRONMENT}-LatestSite"
      - IMAGE_REPO_NAME="${CURRENT_ENVIRONMENT}-bot-repo"

      - echo $AWS_ACCOUNT_ID
      - echo $IMAGE_TAG
      - echo $IMAGE_TAG_SITE
      - echo $IMAGE_REPO_NAME

      - pytest

      - echo Pushing the Docker image bot...
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG

      - echo Pushing the Docker image site...
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG_SITE

      - echo Writing image definitions file...
      - mkdir bot
      - cd bot
      - printf '[{"name":"%s-bot-container","imageUri":"%s"}]' $CURRENT_ENVIRONMENT $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG > imagedefinitions.json
      - cd ..
      - mkdir site
      - cd site
      - printf '[{"name":"%s-site-container","imageUri":"%s"}]' $CURRENT_ENVIRONMENT $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG_SITE > imagedefinitions.json
      - cd ..

      # update cloudformation for appropriate stack
      - aws cloudformation update-stack --stack-name ${CURRENT_ENVIRONMENT}-deploy --template-body file://cloudformation/bot_stack.yml --capabilities CAPABILITY_NAMED_IAM CAPABILITY_IAM \

      # CODEBUILD_BUILD_NUMBER -- only do this after first run
      # update cloudformation after pushing docker imagses
      # for potential dev branches, would skip this step.
      # - echo uploading cloudformation files to s3...
      # - aws s3 sync cloudformation "s3://cloudformation-files-renzen/cloudformation/"
      # - aws s3 sync cloudformation "s3://cloudformation-files-renzen/buildspecs/"  # use these uploaded buildspecs in dev environment instead of local
      # - python3 cloudformation/apply_cloudformation.py

artifacts:
  files:
    - '**/*'
  secondary-artifacts:
    secondary_artifact_name_1:
      base-directory: bot
      files:
        - imagedefinitions.json
      name: secondary_artifact_name_1
    secondary_artifact_name_2:
      base-directory: site
      files:
        - imagedefinitions.json
      name: secondary_artifact_name_2
